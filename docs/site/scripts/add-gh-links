#!/usr/bin/env python3
# Copyright 2024 Metrum Research Group
# SPDX-License-Identifier: MIT
"""usage: {} <github url>

Read markdown content from stdin and write it to stdout replacing

 * #NNN with [#NNN](<github url>/issue/NNN)

 * commit IDs with links to [<same ID>](<github url>/commit/<full ID>)

   If something looks like a commit but isn't a known commit in the
   current repository, it's left as is.

This script must be executed from a Git repository.
"""

import fileinput
import re
import subprocess as sp
import sys

link_re = re.compile(r"\B#([1-9][0-9]*)\b")


def link_issues(url, string):
    return link_re.sub(rf"[#\1]({url}/issues/\1)", string)


commit_re = re.compile(r"\b([0-9a-f]{7,})\b")


# Note: This runs a git process per commit candidate.  If this were to
# be used in a case where there is a large amount of input and
# performance matters, consider rewriting to use cat-file and a single
# process.
def replace_commit(matchobj):
    fullmatch = matchobj.group(0)
    commit = matchobj.group(1)

    try:
        p = sp.run(
            ["git", "rev-parse", "--verify", "--quiet", commit + "^{commit}"],
            check=True,
            capture_output=True,
            encoding="utf-8",
        )
    except sp.CalledProcessError as err:
        if err.returncode == 1:
            # This doesn't resolve to a known commit.
            return fullmatch
        raise

    resolved = p.stdout.rstrip("\n")
    return fullmatch.replace(commit, f"[{commit}]({url}/commit/{resolved})")


def link_commits(url, string):
    return commit_re.sub(replace_commit, string)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        sys.stderr.write(__doc__.format(sys.argv[0]))
        sys.exit(1)

    url = sys.argv[1]
    if url.endswith("/"):
        url = url[:-1]

    for line in fileinput.input("-"):
        line = link_issues(url, line)
        line = link_commits(url, line)
        sys.stdout.write(line)
